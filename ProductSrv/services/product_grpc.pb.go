// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: product.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductGrpc_CreateProduct_FullMethodName = "/ProductGrpc.ProductGrpc/CreateProduct"
	ProductGrpc_GetAllProduct_FullMethodName = "/ProductGrpc.ProductGrpc/GetAllProduct"
	ProductGrpc_GetProductID_FullMethodName  = "/ProductGrpc.ProductGrpc/GetProductID"
)

// ProductGrpcClient is the client API for ProductGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductGrpcClient interface {
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	GetAllProduct(ctx context.Context, in *GetAllProductRequest, opts ...grpc.CallOption) (*GetAllProductResponse, error)
	GetProductID(ctx context.Context, in *GetProductIDRequest, opts ...grpc.CallOption) (*GetProductIDResponse, error)
}

type productGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewProductGrpcClient(cc grpc.ClientConnInterface) ProductGrpcClient {
	return &productGrpcClient{cc}
}

func (c *productGrpcClient) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, ProductGrpc_CreateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productGrpcClient) GetAllProduct(ctx context.Context, in *GetAllProductRequest, opts ...grpc.CallOption) (*GetAllProductResponse, error) {
	out := new(GetAllProductResponse)
	err := c.cc.Invoke(ctx, ProductGrpc_GetAllProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productGrpcClient) GetProductID(ctx context.Context, in *GetProductIDRequest, opts ...grpc.CallOption) (*GetProductIDResponse, error) {
	out := new(GetProductIDResponse)
	err := c.cc.Invoke(ctx, ProductGrpc_GetProductID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductGrpcServer is the server API for ProductGrpc service.
// All implementations must embed UnimplementedProductGrpcServer
// for forward compatibility
type ProductGrpcServer interface {
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	GetAllProduct(context.Context, *GetAllProductRequest) (*GetAllProductResponse, error)
	GetProductID(context.Context, *GetProductIDRequest) (*GetProductIDResponse, error)
	mustEmbedUnimplementedProductGrpcServer()
}

// UnimplementedProductGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedProductGrpcServer struct {
}

func (UnimplementedProductGrpcServer) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductGrpcServer) GetAllProduct(context.Context, *GetAllProductRequest) (*GetAllProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProduct not implemented")
}
func (UnimplementedProductGrpcServer) GetProductID(context.Context, *GetProductIDRequest) (*GetProductIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductID not implemented")
}
func (UnimplementedProductGrpcServer) mustEmbedUnimplementedProductGrpcServer() {}

// UnsafeProductGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductGrpcServer will
// result in compilation errors.
type UnsafeProductGrpcServer interface {
	mustEmbedUnimplementedProductGrpcServer()
}

func RegisterProductGrpcServer(s grpc.ServiceRegistrar, srv ProductGrpcServer) {
	s.RegisterService(&ProductGrpc_ServiceDesc, srv)
}

func _ProductGrpc_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductGrpcServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductGrpc_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductGrpcServer).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductGrpc_GetAllProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductGrpcServer).GetAllProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductGrpc_GetAllProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductGrpcServer).GetAllProduct(ctx, req.(*GetAllProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductGrpc_GetProductID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductGrpcServer).GetProductID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductGrpc_GetProductID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductGrpcServer).GetProductID(ctx, req.(*GetProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductGrpc_ServiceDesc is the grpc.ServiceDesc for ProductGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProductGrpc.ProductGrpc",
	HandlerType: (*ProductGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ProductGrpc_CreateProduct_Handler,
		},
		{
			MethodName: "GetAllProduct",
			Handler:    _ProductGrpc_GetAllProduct_Handler,
		},
		{
			MethodName: "GetProductID",
			Handler:    _ProductGrpc_GetProductID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}

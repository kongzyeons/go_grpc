// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: order.proto

package grpcClient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderGrpc_CreateOrder_FullMethodName   = "/OrderGrpc.OrderGrpc/CreateOrder"
	OrderGrpc_GetallOrder_FullMethodName   = "/OrderGrpc.OrderGrpc/GetallOrder"
	OrderGrpc_GetOrderID_FullMethodName    = "/OrderGrpc.OrderGrpc/GetOrderID"
	OrderGrpc_AddProduct_FullMethodName    = "/OrderGrpc.OrderGrpc/AddProduct"
	OrderGrpc_DeleteOrderID_FullMethodName = "/OrderGrpc.OrderGrpc/DeleteOrderID"
)

// OrderGrpcClient is the client API for OrderGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderGrpcClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetallOrder(ctx context.Context, in *GetallOrderRequest, opts ...grpc.CallOption) (*GetallOrderResponse, error)
	GetOrderID(ctx context.Context, in *GetOrderIDRequest, opts ...grpc.CallOption) (*GetOrderIDResponse, error)
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error)
	DeleteOrderID(ctx context.Context, in *DeleteOrderIDRequest, opts ...grpc.CallOption) (*DeleteOrderIDResponse, error)
}

type orderGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderGrpcClient(cc grpc.ClientConnInterface) OrderGrpcClient {
	return &orderGrpcClient{cc}
}

func (c *orderGrpcClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, OrderGrpc_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderGrpcClient) GetallOrder(ctx context.Context, in *GetallOrderRequest, opts ...grpc.CallOption) (*GetallOrderResponse, error) {
	out := new(GetallOrderResponse)
	err := c.cc.Invoke(ctx, OrderGrpc_GetallOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderGrpcClient) GetOrderID(ctx context.Context, in *GetOrderIDRequest, opts ...grpc.CallOption) (*GetOrderIDResponse, error) {
	out := new(GetOrderIDResponse)
	err := c.cc.Invoke(ctx, OrderGrpc_GetOrderID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderGrpcClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*AddProductResponse, error) {
	out := new(AddProductResponse)
	err := c.cc.Invoke(ctx, OrderGrpc_AddProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderGrpcClient) DeleteOrderID(ctx context.Context, in *DeleteOrderIDRequest, opts ...grpc.CallOption) (*DeleteOrderIDResponse, error) {
	out := new(DeleteOrderIDResponse)
	err := c.cc.Invoke(ctx, OrderGrpc_DeleteOrderID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderGrpcServer is the server API for OrderGrpc service.
// All implementations must embed UnimplementedOrderGrpcServer
// for forward compatibility
type OrderGrpcServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetallOrder(context.Context, *GetallOrderRequest) (*GetallOrderResponse, error)
	GetOrderID(context.Context, *GetOrderIDRequest) (*GetOrderIDResponse, error)
	AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error)
	DeleteOrderID(context.Context, *DeleteOrderIDRequest) (*DeleteOrderIDResponse, error)
	mustEmbedUnimplementedOrderGrpcServer()
}

// UnimplementedOrderGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedOrderGrpcServer struct {
}

func (UnimplementedOrderGrpcServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderGrpcServer) GetallOrder(context.Context, *GetallOrderRequest) (*GetallOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetallOrder not implemented")
}
func (UnimplementedOrderGrpcServer) GetOrderID(context.Context, *GetOrderIDRequest) (*GetOrderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderID not implemented")
}
func (UnimplementedOrderGrpcServer) AddProduct(context.Context, *AddProductRequest) (*AddProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedOrderGrpcServer) DeleteOrderID(context.Context, *DeleteOrderIDRequest) (*DeleteOrderIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderID not implemented")
}
func (UnimplementedOrderGrpcServer) mustEmbedUnimplementedOrderGrpcServer() {}

// UnsafeOrderGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderGrpcServer will
// result in compilation errors.
type UnsafeOrderGrpcServer interface {
	mustEmbedUnimplementedOrderGrpcServer()
}

func RegisterOrderGrpcServer(s grpc.ServiceRegistrar, srv OrderGrpcServer) {
	s.RegisterService(&OrderGrpc_ServiceDesc, srv)
}

func _OrderGrpc_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderGrpcServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderGrpc_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderGrpcServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderGrpc_GetallOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetallOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderGrpcServer).GetallOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderGrpc_GetallOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderGrpcServer).GetallOrder(ctx, req.(*GetallOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderGrpc_GetOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderGrpcServer).GetOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderGrpc_GetOrderID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderGrpcServer).GetOrderID(ctx, req.(*GetOrderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderGrpc_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderGrpcServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderGrpc_AddProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderGrpcServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderGrpc_DeleteOrderID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderGrpcServer).DeleteOrderID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderGrpc_DeleteOrderID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderGrpcServer).DeleteOrderID(ctx, req.(*DeleteOrderIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderGrpc_ServiceDesc is the grpc.ServiceDesc for OrderGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OrderGrpc.OrderGrpc",
	HandlerType: (*OrderGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderGrpc_CreateOrder_Handler,
		},
		{
			MethodName: "GetallOrder",
			Handler:    _OrderGrpc_GetallOrder_Handler,
		},
		{
			MethodName: "GetOrderID",
			Handler:    _OrderGrpc_GetOrderID_Handler,
		},
		{
			MethodName: "AddProduct",
			Handler:    _OrderGrpc_AddProduct_Handler,
		},
		{
			MethodName: "DeleteOrderID",
			Handler:    _OrderGrpc_DeleteOrderID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
